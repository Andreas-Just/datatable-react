{"version":3,"sources":["Pagination.js","Datatable.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","_ref","page","perPage","totalCount","onPageChange","pagesCount","Math","ceil","pages","Array","fill","map","_","i","react_default","a","createElement","className","p","key","style","backgroundColor","onClick","Datatable","state","sortColumn","sortAsc","query","visibleQuery","handleHeaderClick","_this","setState","prevState","handlePerPageChange","event","target","value","handlePageChange","handleQueryChange","updateQuery","debounce","items","sign","Object","toConsumableArray","sort","b","localeCompare","_ref2","start","end","slice","_ref3","queryRegexp","RegExp","filter","person","test","name","_this2","this","_this$state","_this$props","props","config","sortedItems","sortItems","filteredItems","filterItems","visibleItems","paginateItems","type","onChange","placeholder","src_Pagination","length","entries","_ref4","_ref5","slicedToArray","isSortable","title","item","keys","render","Component","peopleColumnConfig","checkbox","isSearchable","Link","to","concat","born","sex","age","died","father","mother","App","people","isLoaded","fetch","response","json","src_Datatable","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0b3f61b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Pagination = ({ page, perPage, totalCount, onPageChange}) => {\n  const pagesCount = Math.ceil(totalCount / perPage);\n  const pages = Array(pagesCount)\n    .fill(0).map((_, i) => i + 1);\n\n  return (\n    <div className=\"Datatable__pagination\">\n      {pages.map(p => (\n        <button\n          key={p}\n          style={{ backgroundColor: p === page ? '#E0E0E0' : 'white' }}\n          onClick={() => onPageChange(p)}\n        >\n          { p }\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Pagination;","import React, { Component } from 'react';\n\nimport debounce from 'lodash/debounce';\nimport Pagination from \"./Pagination\";\n\nclass Datatable extends Component {\n  state = {\n    sortColumn: null,\n    sortAsc: true,\n    perPage: 5,\n    page: 1,\n    query: '',\n    visibleQuery: '',\n  };\n\n  handleHeaderClick = (key) => {\n    this.setState((prevState) => ({\n      sortColumn: key,\n      sortAsc: prevState.sortColumn === key ? !prevState.sortAsc : true,\n    }));\n\n  };\n\n  handlePerPageChange = (event) => {\n    this.setState({\n      perPage: +event.target.value,\n      page: 1,\n    })\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ page })\n  };\n\n  handleQueryChange = (event) => {\n    this.setState({\n      visibleQuery: event.target.value,\n    });\n\n    this.updateQuery(event.target.value);\n  };\n\n  updateQuery = debounce(query => {\n    this.setState({\n      query: query,\n      page: 1,\n    });\n  }, 500);\n\n  sortItems({ items, sortColumn, sortAsc }) {\n    if (!sortColumn) {\n      return items;\n    }\n\n    const sign = sortAsc ? 1 : -1;\n    const sortFn = (a, b) => {\n      if (!a[sortColumn] && !b[sortColumn]) {\n        a[sortColumn] = '';\n        b[sortColumn] = '';\n      } else if (!a[sortColumn]) {\n        a[sortColumn] = '';\n      }\n\n      return typeof items[0][sortColumn] === 'number'\n        ? sign * (a[sortColumn] - b[sortColumn])\n        : sign * (a[sortColumn].localeCompare(b[sortColumn]));\n    };\n\n    return [...items].sort(sortFn);\n  }\n\n  paginateItems({ items, page, perPage }) {\n    const start = (page - 1) * perPage;\n    const end = start + perPage;\n\n    return items.slice(start, end);\n  }\n\n  filterItems({ items, query }) {\n    const queryRegexp = new RegExp(query, 'i');\n\n    return items\n      .filter(person => queryRegexp.test(person.name));\n  }\n\n\n  render() {\n    const { page, perPage, query, visibleQuery, sortColumn, sortAsc } = this.state;\n    const { config, items } = this.props;\n\n    const sortedItems = this.sortItems({\n      items,\n      sortColumn,\n      sortAsc,\n    });\n\n    const filteredItems = this.filterItems({\n      items: sortedItems,\n      query,\n    });\n\n    const visibleItems = this.paginateItems({\n      items: filteredItems,\n      page,\n      perPage,\n    });\n\n    return (\n      <div className=\"Datatable\">\n        <input\n          className=\"Datatable__filter\"\n          type=\"text\"\n          value={visibleQuery}\n          onChange={this.handleQueryChange}\n          placeholder={\"-- Please enter a name --\"}\n        />\n\n        <select\n          className=\"Datatable__select\"\n          onChange={this.handlePerPageChange}\n          value={this.state.perPage}\n        >\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"15\">15</option>\n          <option value=\"20\">20</option>\n          <option value=\"50\">50</option>\n        </select>\n\n        <Pagination\n          page={page}\n          perPage={perPage}\n          totalCount={filteredItems.length}\n          onPageChange={this.handlePageChange}\n        />\n\n        <table className=\"Datatable__table Table\">\n          <thead>\n            <tr>\n              {Object.entries(config).map(([key, value]) => (\n                <th\n                  key={key}\n                  className={\n                    !value.isSortable ? '' :\n                    this.state.sortAsc ? 'Table__sort-up' : 'Table__sort-down'\n                  }\n                  onClick={value.isSortable\n                    ? () => this.handleHeaderClick(key)\n                    : null\n                  }\n                >\n                  {value.title}\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleItems.map(item =>\n              <tr key={item.name}>\n                { Object.keys(config).map(key => (\n                  <td key={key}>\n                    {config[key].render ? config[key].render(item) : item[key]}\n                  </td>\n                ))}\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Datatable;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './App.css';\nimport Datatable from './Datatable';\n\nconst peopleColumnConfig = {\n  checkbox: {\n    title: '',\n    render: () => (\n      <input type=\"checkbox\" />\n    )\n  },\n  name: { // Только для тех ключей которые есть в columnConfig будут колонки в таблице\n    title: 'Имя', // в таблице колонка будет так называться\n    isSortable: true, // по этой колонке можно сортировать\n    isSearchable: true, // поиск будет проверять эту и последнюю колонки\n    render: (person) => (\n      <Link to={`/people/${person.born}`} className=\"Table__link\">\n        {person.name}\n      </Link>\n    )\n  },\n  sex: {\n    title: 'Пол',\n  },\n  born: {\n    title: 'Год рождения',\n    isSortable: true,\n  },\n  age: {\n    title: 'Возраст',\n    render: (person) => person.died - person.born\n  },\n  father: {\n    title: 'Отец',\n    isSortable: true,\n    isSearchable: true,\n  },\n  mother: {\n    title: 'Мать',\n    isSortable: true,\n    isSearchable: true,\n  }\n};\n\nclass App extends Component {\n  state = {\n    people: [],\n    config: peopleColumnConfig,\n    isLoaded: false,\n  };\n\n  async componentDidMount() {\n    const response = await fetch('https://andreas-just.github.io/library-json/people/people.json');\n    const people = await response.json();\n\n    this.setState({\n      people,\n      isLoaded: true\n    });\n  }\n\n  render () {\n    const { people, config, isLoaded } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Datatable</h1>\n        {isLoaded ? (\n          <Datatable\n            items={people}\n            config={config}\n          />\n        ) : (\n          <p>Loading...</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}