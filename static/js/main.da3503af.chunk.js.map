{"version":3,"sources":["Datatable.js","App.js","serviceWorker.js","index.js"],"names":["Datatable","state","sortColumn","sortAsc","handleHeaderClick","key","_this","props","config","isSortable","setState","_ref","getSortedItems","_this$state","items","sign","sort","a","b","localeCompare","_this2","this","visibleItems","react_default","createElement","className","Object","entries","map","_ref2","_ref3","slicedToArray","value","onClick","title","item","Datatable_Row","name","Component","Row","_ref4","keys","Datatable_Cell","column","render","Cell","_ref5","peopleColumnConfig","checkbox","type","isSearchable","person","Link","to","concat","born","sex","age","died","father","mother","App","people","fetch","response","json","src_Datatable","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da3503af.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Datatable extends Component {\n  state = {\n    sortColumn: null,\n    sortAsc: true,\n  };\n\n  handleHeaderClick = (key) => {\n    if (!this.props.config[key].isSortable) return;\n\n    this.setState(({sortColumn, sortAsc}) => {\n      return {\n        sortColumn: key,\n        sortAsc: sortColumn === key ? !sortAsc : true,\n      };\n    })\n\n  };\n\n  getSortedItems = () => {\n    const { sortColumn, sortAsc } = this.state;\n    const { items } = this.props;\n\n    if (!sortColumn) {\n      return items;\n    }\n\n    const sign = sortAsc ? 1 : -1;\n    const sortFn = (a, b) => {\n      if (!a[sortColumn] && !b[sortColumn]) {\n        a[sortColumn] = '';\n        b[sortColumn] = '';\n      } else if (!a[sortColumn]) {\n        a[sortColumn] = '';\n      }\n\n      return typeof items[0][sortColumn] === 'number'\n        ? sign * (a[sortColumn] - b[sortColumn])\n        : sign * (a[sortColumn].localeCompare(b[sortColumn]));\n    };\n\n    return items.sort(sortFn);\n  };\n\n  render() {\n    const visibleItems = this.getSortedItems();\n    const { config } = this.props;\n\n    return (\n      <div>\n        <table className=\"Datatable\">\n          <thead>\n            <tr>\n              {Object.entries(config).map(([key, value]) => (\n                <th\n                  key={key}\n                  className={\n                    !value.isSortable ? '' :\n                    this.state.sortAsc ? 'sortable-up' : 'sortable-down'\n                  }\n                  onClick={() => this.handleHeaderClick(key)}\n                >\n                  {value.title}\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleItems.map(item =>\n              <Row key={item.name} item={item} config={config}/>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst Row = ({ item, config }) => (\n  <tr>\n    { Object.keys(config).map(key => (\n      <Cell\n        key={key}\n        item={item}\n        column={key}\n        render={config[key].render}\n      />\n    ))}\n  </tr>\n);\n\nconst Cell = ({ item, column, render }) => {\n  return (\n    <td>{render ? render(item) : item[column]}</td>\n  );\n};\n\nexport default Datatable;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './App.css';\nimport Datatable from './Datatable';\n\nconst peopleColumnConfig = {\n  checkbox: {\n    title: '',\n    render: () => (\n      <input type=\"checkbox\" />\n    )\n  },\n  name: { // Только для тех ключей которые есть в columnConfig будут колонки в таблице\n    title: 'Имя', // в таблице колонка будет так называться\n    isSortable: true, // по этой колонке можно сортировать\n    isSearchable: true, // поиск будет проверять эту и последнюю колонки\n    render: (person) => (\n      <Link to={`/people/${person.born}`}>{person.name}</Link>\n    )\n  },\n  sex: {\n    title: 'Пол',\n  },\n  born: {\n    title: 'Год рождения',\n    isSortable: true,\n  },\n  age: {\n    title: 'Возраст',\n    render: (person) => person.died - person.born\n  },\n  father: {\n    title: 'Отец',\n    isSortable: true,\n    isSearchable: true,\n  },\n  mother: {\n    title: 'Мать',\n    isSortable: true,\n    isSearchable: true,\n  }\n};\n\nclass App extends Component {\n  state = {\n    people: [],\n    config: peopleColumnConfig,\n  };\n\n  async componentDidMount() {\n    const response = await fetch('https://andreas-just.github.io/library-json/people/people.json');\n    const people = await response.json();\n\n    this.setState({ people });\n  }\n\n  render () {\n    const { people, config } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Datatable</h1>\n        <Datatable\n          items={people}\n          config={config}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}